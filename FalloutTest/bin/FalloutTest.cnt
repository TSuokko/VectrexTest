HIGHEST_USED_RAM $C972
COMMENT $C972 not used RAM onword...
LABEL $0000 _game_header
LABEL $0023 _crt0_init_data
LABEL $003B _crt0_copy_data
LABEL $0043 _crt0_init_bss
LABEL $004C _crt0_zero_bss
LABEL $0052 _crt0_startup
LABEL $005B _crt0_restart
LABEL $005E _MousePointer
LABEL $0069 _setup
LABEL $007C _disable_controller_2_y
LABEL $0080 _disable_controller_2_x
LABEL $0084 _enable_controller_1_y
LABEL $008A _enable_controller_1_x
LABEL $0090 LC0
LABEL $00A3 LC1
LABEL $00BB LC2
LABEL $00D1 LC3
LABEL $00E9 LC4
LABEL $0101 LC5
LABEL $0115 LC6
LABEL $0125 LC7
LABEL $0134 LC8
LABEL $0145 _mainMenu
LABEL $01A9 L12
LABEL $01C7 L14
LABEL $01E4 L15
LABEL $01FF L16
LABEL $0200 _RepairIdentityGame
LABEL $023F L18
LABEL $024D L19
LABEL $025D L20
LABEL $026B L21
LABEL $0277 L22
LABEL $0283 L23
LABEL $028F L24
LABEL $029B L25
LABEL $02A1 _joystick_1_y
LABEL $02A5 _joystick_1_x
LABEL $02A9 LC9
LABEL $02BD _main
LABEL $02D0 L44
LABEL $02FB L38
LABEL $0305 L34
LABEL $0316 L35
LABEL $0327 L36
LABEL $033D L39
LABEL $0369 L42
LABEL $0371 L41
LABEL $0374 L40
LABEL $0377 L37
LABEL $0388 L33
LABEL $038E _reg_max_data
LABEL $039E rleEncodedData
LABEL $039F moreBits
LABEL $03B0 bit_is_ready1
LABEL $03CB bit_is_ready2
LABEL $03D2 rleCounterBit0NotSet
LABEL $03E3 bit_is_ready3
LABEL $03EA rleCounterBit1NotSet
LABEL $03FB bit_is_ready4
LABEL $0402 rleCounterBit2NotSet
LABEL $0419 bit_is_ready5
LABEL $0420 rleCounterBit3NotSet
LABEL $0437 bit_is_ready6
LABEL $043E rleCounterBit4NotSet
LABEL $0453 bit_is_ready7
LABEL $045A rleCounterBit5NotSet
LABEL $046F bit_is_ready8
LABEL $0476 rleCounterBit6NotSet
LABEL $048B bit_is_ready9
LABEL $0492 rleCounterBit7NotSet
LABEL $0498 read16bitContinue
LABEL $04A0 no_carry
LABEL $04B2 bit_is_ready10
LABEL $04BA rleCounterBitXNotSet
LABEL $04BE rle16bitdone
LABEL $04C0 rle8bitdone
LABEL $04C4 do_ym_sound
LABEL $04D8 getCurrentRegByte:next_reg
LABEL $04E4 inPhraseOut
LABEL $04F2 not_in_phrase
LABEL $04F7 done:currentPharseNotEnded
LABEL $0503 no13
LABEL $0519 doNotWriteReg13
LABEL $0521 ymsodone
LABEL $0522 noValidByte
LABEL $0532 bit_is_ready12
LABEL $053C dechifer
LABEL $054C bit_is_ready13
LABEL $0560 getNextCodeBit
LABEL $0574 bit_is_ready14
LABEL $057D testNextPhrase:code_bit_notset
LABEL $0583 increaseCodeBits
LABEL $058B bitLenFound
LABEL $05A4 directByte
LABEL $05C7 reg8Bits
LABEL $05D7 bit_is_ready15
LABEL $05DE noBit1
LABEL $05EF bit_is_ready16
LABEL $05F6 noBit2
LABEL $05F7 reg6Bits
LABEL $0607 bit_is_ready17
LABEL $060E noBit3
LABEL $060F reg5Bits
LABEL $061F bit_is_ready18
LABEL $0626 noBit4
LABEL $0627 reg4Bits
LABEL $0637 bit_is_ready19
LABEL $063E noBit5
LABEL $064F bit_is_ready20
LABEL $0656 noBit6
LABEL $0667 bit_is_ready21
LABEL $066E noBit7
LABEL $067F bit_is_ready22
LABEL $0686 noBit8
LABEL $068B init_ym_sound
LABEL $06A4 nreg_init
LABEL $06C2 regInitDone
LABEL $C880 _exitText
LABEL $C881 _cursor_x
LABEL $C882 _cursor_y
LABEL $C883 _gameState
LABEL $C884 _cregister
LABEL $C885 _temp
LABEL $C886 _temp2
LABEL $C887 _temp3
LABEL $C888 _calc_coder
LABEL $C889 _calc_bits
LABEL $C88A _ym_len
LABEL $C88C _ym_data_current
LABEL $C88E _ym_name
LABEL $C890 _ym_regs_used
LABEL $C891 _ym_regs_count
LABEL $C892 _ym_data_start
COMMENT $007C Vec_Joy_Mux_2_Y
COMMENT $0080 Vec_Joy_Mux_2_X
COMMENT $0086 Vec_Joy_Mux_1_Y
COMMENT $008C Vec_Joy_Mux_1_X
COMMENT $018B Vec_Buttons.1, Vec_Buttons
COMMENT $0195 gameState
COMMENT $01A9 Vec_Buttons.3, Vec_Buttons
COMMENT $01B3 gameState
COMMENT $01C7 Vec_Buttons.4, Vec_Buttons
COMMENT $01D1 gameState
COMMENT $01E4 Vec_Buttons.5, Vec_Buttons
COMMENT $01EE gameState
COMMENT $0204 VIA_t1_cnt_lo
COMMENT $0207 cursor_y
COMMENT $020A cursor_y.6
COMMENT $020C cursor_x
COMMENT $020F cursor_x.7
COMMENT $0211 cursor_x.7
COMMENT $0213 a
COMMENT $0215 cursor_y.6
COMMENT $0217 b
COMMENT $0219 a
COMMENT $021D b
COMMENT $0226 VIA_t1_cnt_lo
COMMENT $0235 cursor_y.8, cursor_y
COMMENT $0238 cursor_y.9
COMMENT $023A cursor_y.9, cursor_y
COMMENT $0245 cursor_y.10, cursor_y
COMMENT $0248 cursor_y.11
COMMENT $024A cursor_y.11, cursor_y
COMMENT $0253 cursor_x.12, cursor_x
COMMENT $0256 cursor_x.13
COMMENT $0258 cursor_x.13, cursor_x
COMMENT $0263 cursor_x.14, cursor_x
COMMENT $0266 cursor_x.15
COMMENT $0268 cursor_x.15, cursor_x
COMMENT $026B cursor_x.16, cursor_x
COMMENT $026E : ; cursor_x.16
COMMENT $0274 cursor_x
COMMENT $0277 cursor_x.17, cursor_x
COMMENT $027A : ; cursor_x.17
COMMENT $0280 cursor_x
COMMENT $0283 cursor_y.18, cursor_y
COMMENT $0286 : ; cursor_y.18
COMMENT $028C cursor_y
COMMENT $028F cursor_y.19, cursor_y
COMMENT $0292 : ; cursor_y.19
COMMENT $0298 cursor_y
COMMENT $02A1 D.3039, Vec_Joy_1_Y
COMMENT $02A5 D.3035, Vec_Joy_1_X
COMMENT $02C1 cursor_x
COMMENT $02C4 cursor_y
COMMENT $02CA gameState
COMMENT $02CD exitText
COMMENT $02DE gameState
COMMENT $02E1 gameState.20
COMMENT $02E3 gameState.20
COMMENT $02E9 gameState.20
COMMENT $02EB zero_extendqihi: R:b -> R:d
COMMENT $02EE tmp43
COMMENT $02F5 tmp44, tmp43
COMMENT $02F7 tmp45
COMMENT $02F9 tmp45
COMMENT $0327 Vec_Buttons.21, Vec_Buttons
COMMENT $032F exitText.22, exitText
COMMENT $0332 exitText.22
COMMENT $0337 exitText
COMMENT $033D exitText.23, exitText
COMMENT $0340 exitText.23
COMMENT $0351 Vec_Buttons.24, Vec_Buttons
COMMENT $0359 Vec_Buttons.26, Vec_Buttons
COMMENT $0361 Vec_Buttons.27, Vec_Buttons
COMMENT $0369 gameState
COMMENT $036C exitText
COMMENT $03B8 in y now our count of bits
COMMENT $0496 assuming high byte is zero of counter
COMMENT $049A LSL A
COMMENT $049B LSL B
COMMENT $049C if no carry, than exit
COMMENT $049E otherwise overflow from B to 0bit of A
COMMENT $04C0 assuming high byte is zero of counter
COMMENT $04C4 load current VBL Counter
COMMENT $04C7 if 0, than we are done
COMMENT $04C9 otherwise remember we are doing one byte now
COMMENT $04CC and store it
COMMENT $04CF get the number of regs we are working on
COMMENT $04D2 and remember them as current counter
COMMENT $04D5 load RAM start address of our wokring structure
COMMENT $04D8 if current RLE counter is zero, than we must get a new byte
COMMENT $04DA jump to get new byte
COMMENT $04DC otherwise, lets check if we are in a phrase (x = pointer to phrase or zero)
COMMENT $04DE jump if not
COMMENT $04E0 where in our phrase are we?
COMMENT $04E2 length of phrase
COMMENT $04E4 load the next byte of our phrase
COMMENT $04E6 store that to current output
COMMENT $04E8 check if we are at the end of the phrase
COMMENT $04EA (in a is phrase len)
COMMENT $04EC if phrase is not at end - continue
COMMENT $04EE other wise we set place to zero
COMMENT $04F0 and decrease out RLE counter
COMMENT $04F9 load current register
COMMENT $0501 if b part of phrase than 0xff, if single byte than 0x1f, indicator for envelope not changed
COMMENT $0503 store register select byte
COMMENT $0505 sound BDIR on, BC1 on, mux off _ LATCH
COMMENT $0509 sound BDIR off, BC1 off, mux off - INACTIVE
COMMENT $050D read sound chip status (?)
COMMENT $050F store data byte
COMMENT $0511 sound BDIR on, BC1 off, mux off - WRITE
COMMENT $0515 sound BDIR off, BC1 off, mux off - INACTIVE
COMMENT $0519 go to next "register" of sound data
COMMENT $051C but only if we are not done yet, if counter is zero
COMMENT $051F we do not branch :-)
COMMENT $0550 if bit is zero - jump
COMMENT $0552 save stackpointer
COMMENT $0556 load the starting position of the phrase mappings for this register
COMMENT $0559 and also the phrase definition address
COMMENT $055C was _calc_bits, a contains the number of bits our current shannon code checkings
COMMENT $055D starting with zero for coder also
COMMENT $0560 prepare load of next coder bit - shift all previous codes one position
COMMENT $0563 increase used bits
COMMENT $0578 if bit is zero - jump
COMMENT $057A otherwise set bit in current code
COMMENT $057D check if it count of currently referenced phrase equals the current shannon bitcount
COMMENT $057F if lower, load next bit (and increase shannon bits)
COMMENT $0581 if equal, than we must check if codes equal
COMMENT $0583 load length of last phase and
COMMENT $0585 add that to our future pointer to phrases
COMMENT $0587 advance one phrase in out mapping (one mapping = 3 byte)
COMMENT $0589 and test the next such got phrase
COMMENT $058B load coder-byte, from current phrase
COMMENT $058D and compare with current loaded coder-byte from "bitstream"
COMMENT $0590 if not the same, check next phrase in phrase mapping (jump)
COMMENT $0592 otherwise we found the correct phrase, load length of current phrase
COMMENT $0594 and remember that
COMMENT $0596 restore stack
COMMENT $059A pointer to current found phrase to X (will be resused in out)
COMMENT $059C current position in phrase is at start 0
COMMENT $059D store the phrase to the structure
COMMENT $059F also the position
COMMENT $05A1 and output the next phrase byte
COMMENT $05B5 number of relevant bits for reg
COMMENT $068B load start address of ram buffer for YM play
COMMENT $068E load length of buffer
COMMENT $0691 clear buffer
COMMENT $0694 count of registers that are used by the player - reset
COMMENT $0697 first load start of all data to y
COMMENT $069A load vbl_len to d
COMMENT $069C and store it to len reset
COMMENT $069F and store it to current data pointer
COMMENT $06A2 load number of next register to work on
COMMENT $06A4 count the registers we actually use
COMMENT $06A7 and store the register of the current data
COMMENT $06A9 load location of translation map to y
COMMENT $06AC and store it
COMMENT $06AF load location of phrases
COMMENT $06B2 and store it
COMMENT $06B5 load location of RLE data
COMMENT $06B8 and store it
COMMENT $06BB add structure length to x
COMMENT $06BE load number of next register to work on
COMMENT $06C0 if negative than we are done
C_INFO_BLOCK $0069 "C:\Users\tsuok\FalloutTTRPG\VectrexTest\FalloutTest\source\main.c "FN_END 65 "enable_controller_1_x(); " BKPOINT=0
C_INFO_BLOCK $006C "C:\Users\tsuok\FalloutTTRPG\VectrexTest\FalloutTest\source\main.c "FN_END 66 "enable_controller_1_y(); " BKPOINT=0
C_INFO_BLOCK $006F "C:\Users\tsuok\FalloutTTRPG\VectrexTest\FalloutTest\source\main.c "FN_END 67 "disable_controller_2_x(); " BKPOINT=0
C_INFO_BLOCK $0072 "C:\Users\tsuok\FalloutTTRPG\VectrexTest\FalloutTest\source\main.c "FN_END 68 "disable_controller_2_y(); " BKPOINT=0
C_INFO_BLOCK $0075 "C:\Users\tsuok\FalloutTTRPG\VectrexTest\FalloutTest\source\main.c "FN_END 69 "joy_digital(); " BKPOINT=0
C_INFO_BLOCK $0078 "C:\Users\tsuok\FalloutTTRPG\VectrexTest\FalloutTest\source\main.c "FN_END 71 "wait_recal(); " BKPOINT=0
C_INFO_BLOCK $0145 "C:\Users\tsuok\FalloutTTRPG\VectrexTest\FalloutTest\source\main.c "FN_END 78 "print_str_d(120, -90, ); " BKPOINT=0
C_INFO_BLOCK $0153 "C:\Users\tsuok\FalloutTTRPG\VectrexTest\FalloutTest\source\main.c "FN_END 79 "print_str_d(70, -120, ); " BKPOINT=0
C_INFO_BLOCK $0161 "C:\Users\tsuok\FalloutTTRPG\VectrexTest\FalloutTest\source\main.c "FN_END 80 "print_str_d(40, -120, ); " BKPOINT=0
C_INFO_BLOCK $016F "C:\Users\tsuok\FalloutTTRPG\VectrexTest\FalloutTest\source\main.c "FN_END 81 "print_str_d(10, -120, ); " BKPOINT=0
C_INFO_BLOCK $017D "C:\Users\tsuok\FalloutTTRPG\VectrexTest\FalloutTest\source\main.c "FN_END 82 "print_str_d(-20, -120, ); " BKPOINT=0
C_INFO_BLOCK $018B "C:\Users\tsuok\FalloutTTRPG\VectrexTest\FalloutTest\source\main.c "FN_END 84 "if (vec_buttons & 1) { " BKPOINT=0
C_INFO_BLOCK $0193 "C:\Users\tsuok\FalloutTTRPG\VectrexTest\FalloutTest\source\main.c "FN_END 85 "gamestate = game_datatransfer; " BKPOINT=0
C_INFO_BLOCK $0198 "C:\Users\tsuok\FalloutTTRPG\VectrexTest\FalloutTest\source\main.c "FN_END 86 "print_str_d(-70, -120, ); " BKPOINT=0
C_INFO_BLOCK $01B1 "C:\Users\tsuok\FalloutTTRPG\VectrexTest\FalloutTest\source\main.c "FN_END 89 "gamestate = game_reconstructbin; " BKPOINT=0
C_INFO_BLOCK $01B6 "C:\Users\tsuok\FalloutTTRPG\VectrexTest\FalloutTest\source\main.c "FN_END 90 "print_str_d(-70, -120, ); " BKPOINT=0
C_INFO_BLOCK $01CF "C:\Users\tsuok\FalloutTTRPG\VectrexTest\FalloutTest\source\main.c "FN_END 93 "gamestate = game_repairidentity; " BKPOINT=0
C_INFO_BLOCK $01D4 "C:\Users\tsuok\FalloutTTRPG\VectrexTest\FalloutTest\source\main.c "FN_END 94 "print_str_d(-70, -120, ); " BKPOINT=0
C_INFO_BLOCK $01EC "C:\Users\tsuok\FalloutTTRPG\VectrexTest\FalloutTest\source\main.c "FN_END 97 "gamestate = game_compileint; " BKPOINT=0
C_INFO_BLOCK $01F1 "C:\Users\tsuok\FalloutTTRPG\VectrexTest\FalloutTest\source\main.c "FN_END 98 "print_str_d(-70, -120, ); " BKPOINT=0
C_INFO_BLOCK $0202 "C:\Users\tsuok\FalloutTTRPG\VectrexTest\FalloutTest\source\main.c "FN_END 106 "via_t1_cnt_lo = 0x40; " BKPOINT=0
C_INFO_BLOCK $0207 "C:\Users\tsuok\FalloutTTRPG\VectrexTest\FalloutTest\source\main.c "FN_END 107 "moveto_d(cursor_x, cursor_y); " BKPOINT=0
C_INFO_BLOCK $0224 "C:\Users\tsuok\FalloutTTRPG\VectrexTest\FalloutTest\source\main.c "FN_END 108 "via_t1_cnt_lo = 0x80; " BKPOINT=0
C_INFO_BLOCK $0229 "C:\Users\tsuok\FalloutTTRPG\VectrexTest\FalloutTest\source\main.c "FN_END 109 "draw_vlc((void*) mousepointer); " BKPOINT=0
C_INFO_BLOCK $022F "C:\Users\tsuok\FalloutTTRPG\VectrexTest\FalloutTest\source\main.c "FN_END 112 "if (joystick_1_x()>0) " BKPOINT=0
C_INFO_BLOCK $0235 "C:\Users\tsuok\FalloutTTRPG\VectrexTest\FalloutTest\source\main.c "FN_END 114 "cursor_y += 5; " BKPOINT=0
C_INFO_BLOCK $0245 "C:\Users\tsuok\FalloutTTRPG\VectrexTest\FalloutTest\source\main.c "FN_END 118 "cursor_y -= 5; " BKPOINT=0
C_INFO_BLOCK $024D "C:\Users\tsuok\FalloutTTRPG\VectrexTest\FalloutTest\source\main.c "FN_END 120 "if (joystick_1_y()>0) " BKPOINT=0
C_INFO_BLOCK $0253 "C:\Users\tsuok\FalloutTTRPG\VectrexTest\FalloutTest\source\main.c "FN_END 122 "cursor_x += 5; " BKPOINT=0
C_INFO_BLOCK $0263 "C:\Users\tsuok\FalloutTTRPG\VectrexTest\FalloutTest\source\main.c "FN_END 126 "cursor_x -= 5; " BKPOINT=0
C_INFO_BLOCK $026B "C:\Users\tsuok\FalloutTTRPG\VectrexTest\FalloutTest\source\main.c "FN_END 128 "if (cursor_x>=120) cursor_x = 120; " BKPOINT=0
C_INFO_BLOCK $0277 "C:\Users\tsuok\FalloutTTRPG\VectrexTest\FalloutTest\source\main.c "FN_END 129 "if (cursor_x<=-120) cursor_x = -120; " BKPOINT=0
C_INFO_BLOCK $0283 "C:\Users\tsuok\FalloutTTRPG\VectrexTest\FalloutTest\source\main.c "FN_END 130 "if (cursor_y>=120) cursor_y = 120; " BKPOINT=0
C_INFO_BLOCK $028F "C:\Users\tsuok\FalloutTTRPG\VectrexTest\FalloutTest\source\main.c "FN_END 131 "if (cursor_y<=-120) cursor_y = -120; " BKPOINT=0
C_INFO_BLOCK $029B "C:\Users\tsuok\FalloutTTRPG\VectrexTest\FalloutTest\source\main.c "FN_END 132 "joy_digital(); " BKPOINT=0
C_INFO_BLOCK $02C1 "C:\Users\tsuok\FalloutTTRPG\VectrexTest\FalloutTest\source\main.c "FN_END 140 "cursor_x = 0; " BKPOINT=0
C_INFO_BLOCK $02C4 "C:\Users\tsuok\FalloutTTRPG\VectrexTest\FalloutTest\source\main.c "FN_END 141 "cursor_y = 0; " BKPOINT=0
C_INFO_BLOCK $02C7 "C:\Users\tsuok\FalloutTTRPG\VectrexTest\FalloutTest\source\main.c "FN_END 142 "setup(); " BKPOINT=0
C_INFO_BLOCK $02CA "C:\Users\tsuok\FalloutTTRPG\VectrexTest\FalloutTest\source\main.c "FN_END 144 "gamestate = mainmenu; " BKPOINT=0
C_INFO_BLOCK $02CD "C:\Users\tsuok\FalloutTTRPG\VectrexTest\FalloutTest\source\main.c "FN_END 145 "exittext = false; " BKPOINT=0
C_INFO_BLOCK $02D0 "C:\Users\tsuok\FalloutTTRPG\VectrexTest\FalloutTest\source\main.c "FN_END 146 "while(1)read_btns(); " BKPOINT=0
C_INFO_BLOCK $02D3 "C:\Users\tsuok\FalloutTTRPG\VectrexTest\FalloutTest\source\main.c "FN_END 150 "wait_recal(); " BKPOINT=0
C_INFO_BLOCK $02D6 "C:\Users\tsuok\FalloutTTRPG\VectrexTest\FalloutTest\source\main.c "FN_END 152 "frwait(); " BKPOINT=0
C_INFO_BLOCK $02D9 "C:\Users\tsuok\FalloutTTRPG\VectrexTest\FalloutTest\source\main.c "FN_END 153 "intensity_a(0x5f); " BKPOINT=0
C_INFO_BLOCK $02DE "C:\Users\tsuok\FalloutTTRPG\VectrexTest\FalloutTest\source\main.c "FN_END 155 "switch(gamestate) " BKPOINT=0
C_INFO_BLOCK $0305 "C:\Users\tsuok\FalloutTTRPG\VectrexTest\FalloutTest\source\main.c "FN_END 158 "print_str_d(-70, -120, ); " BKPOINT=0
C_INFO_BLOCK $0313 "C:\Users\tsuok\FalloutTTRPG\VectrexTest\FalloutTest\source\main.c "FN_END 159 "break; " BKPOINT=0
C_INFO_BLOCK $0316 "C:\Users\tsuok\FalloutTTRPG\VectrexTest\FalloutTest\source\main.c "FN_END 161 "print_str_d(-70, -120, ); " BKPOINT=0
C_INFO_BLOCK $0324 "C:\Users\tsuok\FalloutTTRPG\VectrexTest\FalloutTest\source\main.c "FN_END 162 "break; " BKPOINT=0
C_INFO_BLOCK $0327 "C:\Users\tsuok\FalloutTTRPG\VectrexTest\FalloutTest\source\main.c "FN_END 164 "if (vec_buttons & 4 && !exittext){ " BKPOINT=0
C_INFO_BLOCK $0335 "C:\Users\tsuok\FalloutTTRPG\VectrexTest\FalloutTest\source\main.c "FN_END 165 "exittext = true; " BKPOINT=0
C_INFO_BLOCK $0343 "C:\Users\tsuok\FalloutTTRPG\VectrexTest\FalloutTest\source\main.c "FN_END 169 "print_str_d(-70, -120, ); " BKPOINT=0
C_INFO_BLOCK $0351 "C:\Users\tsuok\FalloutTTRPG\VectrexTest\FalloutTest\source\main.c "FN_END 170 "if(vec_buttons & 1 || vec_buttons & 2 || vec_buttons & 8) " BKPOINT=0
C_INFO_BLOCK $0369 "C:\Users\tsuok\FalloutTTRPG\VectrexTest\FalloutTest\source\main.c "FN_END 172 "gamestate = mainmenu; " BKPOINT=0
C_INFO_BLOCK $036C "C:\Users\tsuok\FalloutTTRPG\VectrexTest\FalloutTest\source\main.c "FN_END 173 "exittext = false; " BKPOINT=0
C_INFO_BLOCK $0371 "C:\Users\tsuok\FalloutTTRPG\VectrexTest\FalloutTest\source\main.c "FN_END 178 "repairidentitygame(); " BKPOINT=0
C_INFO_BLOCK $0374 "C:\Users\tsuok\FalloutTTRPG\VectrexTest\FalloutTest\source\main.c "FN_END 180 "break; " BKPOINT=0
C_INFO_BLOCK $0377 "C:\Users\tsuok\FalloutTTRPG\VectrexTest\FalloutTest\source\main.c "FN_END 183 "print_str_d(-70, -120, ); " BKPOINT=0
C_INFO_BLOCK $0385 "C:\Users\tsuok\FalloutTTRPG\VectrexTest\FalloutTest\source\main.c "FN_END 184 "break; " BKPOINT=0
C_INFO_BLOCK $0388 "C:\Users\tsuok\FalloutTTRPG\VectrexTest\FalloutTest\source\main.c "FN_END 186 "mainmenu(); " BKPOINT=0
C_INFO_BLOCK $038B "C:\Users\tsuok\FalloutTTRPG\VectrexTest\FalloutTest\source\main.c "FN_END 187 "break; " BKPOINT=0
RANGE $0000-$0001 DB_DATA 8
RANGE $0008-$0009 DB_DATA 8
RANGE $000B-$000D DW_DATA 4
RANGE $000D-$0012 DB_DATA 8
RANGE $0019-$001A DB_DATA 8
RANGE $0021-$0022 DB_DATA 8
RANGE $0023-$005E CODE
RANGE $005E-$0069 DB_DATA 8
RANGE $0069-$0090 CODE
RANGE $0090-$0091 DB_DATA 8
RANGE $0098-$0099 DB_DATA 8
RANGE $00A0-$00A1 DB_DATA 8
RANGE $00A3-$00A4 DB_DATA 8
RANGE $00AB-$00AC DB_DATA 8
RANGE $00B3-$00B4 DB_DATA 8
RANGE $00BB-$00BC DB_DATA 8
RANGE $00C3-$00C4 DB_DATA 8
RANGE $00CB-$00CC DB_DATA 8
RANGE $00D1-$00D2 DB_DATA 8
RANGE $00D9-$00DA DB_DATA 8
RANGE $00E1-$00E2 DB_DATA 8
RANGE $00E9-$00EA DB_DATA 8
RANGE $00F1-$00F2 DB_DATA 8
RANGE $00F9-$00FA DB_DATA 8
RANGE $0101-$0102 DB_DATA 8
RANGE $0109-$010A DB_DATA 8
RANGE $0111-$0112 DB_DATA 8
RANGE $0115-$0116 DB_DATA 8
RANGE $011D-$011E DB_DATA 8
RANGE $0125-$0126 DB_DATA 8
RANGE $012D-$012E DB_DATA 8
RANGE $0134-$0135 DB_DATA 8
RANGE $013C-$013D DB_DATA 8
RANGE $0144-$0145 DB_DATA 8
RANGE $0145-$02A9 CODE
RANGE $02A9-$02AA DB_DATA 8
RANGE $02B1-$02B2 DB_DATA 8
RANGE $02B9-$02BA DB_DATA 8
RANGE $02BD-$02FB CODE
RANGE $02FB-$0305 DW_DATA 4
RANGE $0305-$038E CODE
RANGE $038E-$038F DB_DATA 8
RANGE $039E-$06C6 CODE

